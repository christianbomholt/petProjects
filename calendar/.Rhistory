plot.subtitle = element_text(size = 20),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = c(.9,.4),
legend.title = element_text(size = 16),
legend.background = element_blank(),
panel.background = element_blank())
data(unemployment)
library(highcharter)
data(unemployment)
hcmap("countries/us/us-all-all", data = unemployment,
name = "Unemployment", value = "value", joinBy = c("hc-key", "code"),
borderColor = "transparent")
View(unemployment)
map <- hcmap("countries/us/us-all-all", data = unemployment,
name = "Unemployment", value = "value", joinBy = c("hc-key", "code"),
borderColor = "transparent")
map <- map %>%
hc_colorAxis(dataClasses = color_classes(c(seq(0, 10, by = 2), 50))) %>%
hc_legend(layout = "vertical", align = "right",
floating = TRUE, valueDecimals = 0, valueSuffix = "%")
map %>%
hc_colorAxis(dataClasses = color_classes(c(seq(0, 10, by = 2), 50))) %>%
hc_legend(layout = "vertical", align = "right",
floating = TRUE, valueDecimals = 0, valueSuffix = "%")
x11()
ggplot() +
geom_polygon(data = map.county_unemp, aes(x = long, y = lat, group = group, fill = unemployed_rate)) +
geom_polygon(data = map.states, aes(x = long, y = lat, group = group), color = "#EEEEEE", fill = NA, size = .3) +
coord_map("albers", lat0 = 30, lat1 = 40) +
labs(title = "United States unemployment rate, by county" , subtitle = "November, 2016") +
labs(fill = "% unemployed") +
scale_fill_viridis() +
theme(text = element_text(family = "Gill Sans", color = "#444444"),
plot.title = element_text(size = 30),
plot.subtitle = element_text(size = 20),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = c(.9,.4),
legend.title = element_text(size = 16),
legend.background = element_blank(),
panel.background = element_blank())
knitr::opts_chunk$set(echo = TRUE)
library(highcharter)
365*1.5
round(365*1.5)
v <- rep(0,round(365*1.5))
548/7
v <- rep(c(0,0,0,0,0,1,1),round(79))
v
install.packages('forecasts')
install.packages('forecast')
seq(as.Date("2015/7/1"), by = "day", length.out = 12)
cumsum(v)
library("forecast")
x <- forecast(ets(USAccDeaths), h = 48, level = 95)
x
df <- data.frame(Dagesammen=tidsammen,dato=date, Lo_95=tidsammen-0.5,     Hi_95=tidsammen+0.5)
tidsammen <- cumsum(v)
date<-seq(as.Date("2015/7/1"), by = "day", length.out = length(v))
df <- data.frame(Dagesammen=tidsammen,dato=date, Lo_95=tidsammen-0.5,     Hi_95=tidsammen+0.5)
df
xhchart(df)
library(highcharter)
xhchart(df)
hchart(x)
x
hchart(df)
USAccDeaths
ets(USAccDeaths),
ets(USAccDeaths)
df <- data.frame(Dagesammen=tidsammen,dato=date)#, Lo_95=tidsammen-0.5,     Hi_95=tidsammen+0.5)
ets(df)
?ets
?time series
?ts
ts(tidsammen)
ts(tidsammen, start=c(2015,6))
ts(tidsammen, start=c(2015,6),frequency = 7)
library(xts)
df <- as.xts(df)
df <- xts(df)
rownames(df) <- date
df <- as.xts(df)
df
df <- data.frame(Dagesammen=tidsammen)#,dato=date)#, Lo_95=tidsammen-0.5,     Hi_95=tidsammen+0.5)
rownames(df) <- date
df <- as.xts(df)
df
hchart(df)
df <- data.frame(Dagesammen=tidsammen,dato=date,var="d")
hchart(df, "line", hcaes(x = date, y = Dagesammen, group = var))
hchart(df, "line", hcaes(x = dato, y = Dagesammen, group = var))
v <- c(rep(c(0,0,0,0,0,1,1),round(79)),rep(1,100))
tidsammen <- cumsum(v)
date<-seq(as.Date("2015/7/1"), by = "day", length.out = length(v))
df <- data.frame(Dagesammen=tidsammen,dato=date,var="d")
hchart(df, "line", hcaes(x = dato, y = Dagesammen, group = var))
v <- c(rep(c(0,0,0,0,0,1,1),round(80)),rep(1,100))
v <- c(rep(c(0,0,0,0,0,1,1),round(80)),rep(1,7*10))
v2 <- c(rep(c(0,0,0,0,0,1,1),round(90)))
v <- c(rep(c(0,0,0,0,0,1,1),round(80)),rep(1,7*10))
v2 <- c(rep(c(0,0,0,0,0,1,1),round(90)))
tidsammen <- cumsum(v)
tidsammendlyt <- cumsum(v2)
date<-seq(as.Date("2015/7/1"), by = "day", length.out = length(v))
tidsammenflyt <- cumsum(v2)
df<-data.frame(Dagesammen_uden_flytning=tidsammen,dato=date,Dagesammen_med_flytning=tidsammenflyt)
dmelt <- reshape2::melt(df,id=c('date'))
dmelt <- reshape2::melt(df,id=c('dato'))
dmelt
colnames(dmelt)[3] <- 'Dagesammen'
hchart(dmelt, "line", hcaes(x = dato, y =Dagesammen , group = variabel))
dmelt
hchart(dmelt, "line", hcaes(x = dato, y =Dagesammen , group = variable))
v <- c(rep(c(0,0,0,0,0,1,1),round(100)),rep(1,7*10))
v2 <- c(rep(c(0,0,0,0,0,1,1),round(110)))
tidsammen <- cumsum(v)
tidsammenflyt <- cumsum(v2)
date<-seq(as.Date("2015/7/1"), by = "day", length.out = length(v))
df<-data.frame(Dagesammen_uden_flytning=tidsammen,dato=date,Dagesammen_med_flytning=tidsammenflyt)
dmelt <- reshape2::melt(df,id=c('dato'))
colnames(dmelt)[3] <- 'Dagesammen'
hchart(dmelt, "line", hcaes(x = dato, y =Dagesammen , group = variable))
worldgeojson
GNI2010
highchart() %>%
hc_add_series_map(worldgeojson, GNI2010,
value = "GNI", joinBy = "iso3")
highchart(type = "map") %>%
hc_chart(backgroundColor = "#161C20") %>%
hc_add_series(mapData = world, showInLegend = FALSE, nullColor = "#424242",
borderWidth = 0) %>%
hc_add_series(data = marine, type = "mapline", geojson = TRUE,
color = "#2980b9", name = "Marine currents",
tooltip = list(pointFormat = "{point.properties.NOMBRE}")) %>%
hc_add_series(data = plates, type = "mapline", lineWidth = 2, zIndex = -1, geojson = TRUE,
color = "#d35400", name = "Plates",
tooltip = list(pointFormat = "{point.properties.TIPO}")) %>%
hc_add_series(data = volcano, type = "mappoint", color = hex_to_rgba("#f1c40f", 0.4),
geojson = TRUE, name = "Volcanos",
tooltip = list(pointFormat = "{point.properties.NOMBRE}"),
marker = list(lineWidth = 0, radius = 2))
getContent <- function(url) {
library(httr)
content(GET(url))
}
world <- getContent("https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json")
# is text
world <- jsonlite::fromJSON(world, simplifyVector = FALSE)
# http://cedeusdata.geosteiniger.cl/layers/geonode:mundo_corrientes_maritimas
marine <- getContent("http://cedeusdata.geosteiniger.cl/geoserver/wfs?srsName=EPSG%3A4326&typename=geonode%3Amundo_corrientes_maritimas&outputFormat=json&version=1.0.0&service=WFS&request=GetFeature")
# marine <- geojsonio::as.json(marine)
# http://cedeusdata.geosteiniger.cl/layers/geonode:mundo_limites_placas
plates <- getContent("http://cedeusdata.geosteiniger.cl/geoserver/wfs?srsName=EPSG%3A4326&typename=geonode%3Amundo_limites_placas&outputFormat=json&version=1.0.0&service=WFS&request=GetFeature")
# plates <- geojsonio::as.json(plates)
# http://cedeusdata.geosteiniger.cl/layers/geonode:mundo_volcanes
volcano <- getContent("http://cedeusdata.geosteiniger.cl/geoserver/wfs?srsName=EPSG%3A4326&typename=geonode%3Amundo_volcanes&outputFormat=json&version=1.0.0&service=WFS&request=GetFeature")
# volcano <- geojsonio::as.json(volcano)
highchart(type = "map") %>%
hc_chart(backgroundColor = "#161C20") %>%
hc_add_series(mapData = world, showInLegend = FALSE, nullColor = "#424242",
borderWidth = 0) %>%
hc_add_series(data = marine, type = "mapline", geojson = TRUE,
color = "#2980b9", name = "Marine currents",
tooltip = list(pointFormat = "{point.properties.NOMBRE}")) %>%
hc_add_series(data = plates, type = "mapline", lineWidth = 2, zIndex = -1, geojson = TRUE,
color = "#d35400", name = "Plates",
tooltip = list(pointFormat = "{point.properties.TIPO}")) %>%
hc_add_series(data = volcano, type = "mappoint", color = hex_to_rgba("#f1c40f", 0.4),
geojson = TRUE, name = "Volcanos",
tooltip = list(pointFormat = "{point.properties.NOMBRE}"),
marker = list(lineWidth = 0, radius = 2))
shiny::runApp('Documents/Jyske/Valuta model/app')
install.packages('rhandsontable')
pacman::p_load(Quandl, ggplot2, timeDate, DescTools, tseries, lubridate)
install.packages('pacman')
pacman::p_load(Quandl, ggplot2, timeDate, DescTools, tseries, lubridate)
#DOWNLOADING DATA FROM QUANDL
Quandl.api_key("ZAs47__KVErEJmcKX1hr")
tickerString <- paste('CHRIS/CME_NG',1:43,'.4',sep="")
Price_Data <- Quandl(tickerString,start_date="2003-05-12", end_date="2017-01-21")
tickerString <- paste('CHRIS/CME_NG',1:43,'.7',sep="")
tickerString <- paste('CHRIS/CME_NG',1:43,'.7',sep="")
Volume_Data <- Quandl(tickerString,start_date="2003-05-12", end_date="2017-01-21")
runApp('Documents/Jyske/project2.0/application')
runApp('Documents/Jyske/project2.0/application')
ExpiryDate <- sapply(X = idx-1,FUN = expiryfunc)
expiryfunc <- function(nMonths){
return(
as.Date(Price_Data[i,1]+Maturities[i,2+j])
)
}
ExpiryDate <- sapply(X = idx-1,FUN = expiryfunc)
Price_Data[,-1][Price_Data[,-1]>1000] <- NA
Price_Data[,-1][Volume_Data[,-1]==0]  <- NA
NAindex    <- rowSums(!is.na(Price_Data))
Price_Data <- Price_Data[-which(NAindex<10),]
#SETTING UP DATA FRAMES
#-> MATURITIES BASED ON LAST DAY IN MONTH
Maturities <- data.frame(Time=Price_Data$Date,
Last_Day_in_Month=timeLastDayInMonth(Price_Data$Date))
timeMat <- matrix(0,
nrow = nrow(Maturities),
ncol = (ncol(Price_Data)-1))
idx <- 1:(ncol(Price_Data)-1)
matfunc <- function(nMonths, idx){
return(
(as.Date(timeLastDayInMonth(AddMonths((Maturities[idx,2]), nMonths)))+1)-as.Date(Maturities[idx,1])
)
}
shortidx <- (Maturities[,2]+1)-as.Date(Maturities[,1])<=3
timeMat[shortidx,]<- sapply(X = idx,FUN = function(x){
return(matfunc(x,shortidx))
})
knitr::opts_chunk$set(echo = TRUE)
library(DT)
datatable(data.frame(Sandsyndlighed=5/antalMyg))
antalMyg <- 1:10
datatable(data.frame(Sandsyndlighed=5/antalMyg))
knitr::opts_chunk$set(echo = TRUE)
t0 = 2.478
t1 = 3.4
tid = 14
afkast = c(6,-4,8,9,4)*0.01
r = 1+sample(afkast,13,replace = T)
m = 1000
#pensionsbelob = rep(t1,tid)*cumprod(r)+rep(0.12,tid)*cumprod(r)
pensionsim = matrix(0,m,tid)
for(i in 2:m){
r = 1+sample(afkast,13,replace = T)
pensionsim[i,] = rep(t1,tid)*cumprod(r)+rep(0.12,tid)*cumprod(r)
}
r= c(1,rep(1+0.05,tid-1))
pensionsbelob = rep(t0,tid)*cumprod(r)+c(0,rep(0.12,tid-1))*cumprod(r)
colnames(pensionsim) <- 2016+1:tid
df <- reshape2::melt(pensionsim)
library(plotly)
plot_ly(df,x=~Var2,y=~value, group=~Var1, type="scatter", mode="lines")
matplot(t(pensionsim), type='l')
t0 = 2.478
t1 = 3.4
tid = 14
afkast = c(6,-4,8,9,4)*0.01
r = 1+sample(afkast,13,replace = T)
m = 1000
#pensionsbelob = rep(t1,tid)*cumprod(r)+rep(0.12,tid)*cumprod(r)
pensionsim = matrix(0,m,tid)
for(i in 2:m){
r = 1+sample(afkast,tid-1,replace = T)
pensionsim[i,] = rep(t1,tid-1)*cumprod(r)+rep(0.12,tid-1)*cumprod(r)
}
for(i in 1:m){
r = 1+sample(afkast,tid-1,replace = T)
pensionsim[i,2:tid] = rep(t1,tid-1)*cumprod(r)+rep(0.12,tid-1)*cumprod(r)
}
t0 = 2.478
t1 = 3.4
tid = 14
afkast = c(6,-4,8,9,4)*0.01
r = 1+sample(afkast,13,replace = T)
m = 1000
#pensionsbelob = rep(t1,tid)*cumprod(r)+rep(0.12,tid)*cumprod(r)
pensionsim = matrix(r1,m,tid)
t0 = 2.478
t1 = 3.4
tid = 14
afkast = c(6,-4,8,9,4)*0.01
r = 1+sample(afkast,13,replace = T)
m = 1000
#pensionsbelob = rep(t1,tid)*cumprod(r)+rep(0.12,tid)*cumprod(r)
pensionsim = matrix(t1,m,tid)
for(i in 1:m){
r = 1+sample(afkast,tid-1,replace = T)
pensionsim[i,2:tid] = rep(t1,tid-1)*cumprod(r)+rep(0.12,tid-1)*cumprod(r)
}
r= c(1,rep(1+0.05,tid-1))
pensionsbelob = rep(t0,tid)*cumprod(r)+c(0,rep(0.12,tid-1))*cumprod(r)
colnames(pensionsim) <- 2016+1:tid
df <- reshape2::melt(pensionsim)
matplot(t(pensionsim), type='l')
library(highcharter)
hchart(density(pensionsim[,14]), type = "area", color = "#B71C1C", name = "Price")
h<-hchart(density(pensionsim[,14]), type = "area", color = "#B71C1C", name = "Price")
h$yAxis(title = list(text = "rnorm()"),
plotLines = list(list(
value = mean(x),
color = '#ff0000',
width = 3,
zIndex = 4,
label = list(text = "mean",
style = list( color = '#ff0000', fontWeight = 'bold' )
))))
h$yAxis(title = list(text = "rnorm()"),
plotLines = list(list(
value = pensionsbelob,
color = '#ff0000',
width = 3,
zIndex = 4,
label = list(text = "mean",
style = list( color = '#ff0000', fontWeight = 'bold' )
))))
h$yAxis(
plotLines = list(list(
value = pensionsbelob,
color = '#ff0000',
width = 3,
zIndex = 4
)))
hchart(density(pensionsim[,14]), type = "area", color = "#B71C1C", name = "Price") %>%
hc_yAxis(title = list(text = "rnorm()"),
plotLines = list(list(
value = pensionsbelob,
color = '#ff0000',
width = 3,
zIndex = 4,
label = list(text = "mean",
style = list( color = '#ff0000', fontWeight = 'bold'   )
))))
hchart(density(pensionsim[,14]), type = "area", color = "#B71C1C", name = "Price") %>%
hc_yAxis(title = list(text = "rnorm()"),
plotLines = list(list(
value = pensionsbelob,
color = '#ff0000',
width = 3,
zIndex = 4,
label = list(text = "mean",
style = list( color = '#ff0000', fontWeight = 'bold'   )
))))
hchart(density(pensionsim[,14]), type = "area", color = "#B71C1C", name = "Price") %>%
hc_yAxis(title = list(text = "rnorm()"),
plotLines = list(list(
value = pensionsbelob,
color = '#ff0000',
width = 3,
zIndex = 0.4,
label = list(text = "mean",
style = list( color = '#ff0000', fontWeight = 'bold'   )
))))
pensionsbelob
hchart(density(pensionsim[,14]), type = "area", color = "#B71C1C", name = "Price") %>%
hc_yAxis(title = list(text = "rnorm()"),
plotLines = list(list(
value = pensionsbelob[14],
color = '#ff0000',
width = 3,
zIndex = 0.4,
label = list(text = "mean",
style = list( color = '#ff0000', fontWeight = 'bold'   )
))))
pensionsbelob[14]
rep(t0,tid)
cumprod(r)
+c(0,rep(0.12,tid-1))
cumprod(r)
pensionsim[1:5,]
head(pensionsim)
?matplot
matplot(x= colnames(pensionsim),t(pensionsim), type='l')
df = data.frame(Date=1:tid+2016,Value=pensionsbelob)
hchart(df,hcaes(Date,Value))
hchart(df,hcaes(x=Date,y=Value))
hchart(df,"line",hcaes(x=Date,y=Value))
23*1.2
13*1.2
rep(t0,tid)*cumprod(r)
diff(rep(t0,tid)*cumprod(r))
diff(c(0,rep(0.12,tid-1))*cumprod(r))
c(0,rep(0.12,tid-1))
c(0,rep(0.12,tid-1))*cumprod(r)
rep(0.12,tid-1)*cumprod(r)
rep(t1,tid-1)*cumprod(r)
cumsum(rep(0.12,tid-1)*cumprod(r))
cumsum(rep(0.12,tid-1)*cumprod(r))
r = 1+sample(afkast,tid-1,replace = T)
cumsum(rep(0.12,tid-1)*cumprod(r))
0.12*(1+0.05)^13
x <- sort(pensionsim[,14])
y <- 1000/1:1000
plot(x,y)
y
x <- sort(pensionsim[,14])
y <- (1:1000)/1000
plot(x,y)
x <- sort(pensionsim[,14])
y <- (1:1000)/1000
df <- data.frame(percent=y,Belob=x)
hchart(df,"line",hcaes(x=Belob,y=percent))
cumsum(c(0,rep(0.12,tid-1))*cumprod(r))
r= c(1,rep(1+0.05,tid-1))
cumsum(c(0,rep(0.12,tid-1))*cumprod(r))
t0*(1+0.05)*13
t0*(1+0.05)^13
xtable::xtable(df)
load('../Plots_and_tables/Overview.rdata')
DT::datatable(df, options = list(pageLength=200), rownames = F, selection = 'single')
xtable::xtable(df)
xtable::xtable(df[1:10])
xtable::xtable(df[1:10,2:3])
xtable::xtable(df[1:20,2:3])
DT::datatable(df, options = list(pageLength=200), rownames = F, selection = 'single')
DT::datatable(df, options = list(pageLength=200, options=list(dom('t'))), rownames = F, selection = 'single')
DT::datatable(df, options = list(pageLength=200, options=list(dom='t')), rownames = F, selection = 'single')
idx <- df$y %in% customer
customer <- c('deb_knid','deb_idkt','ts_age','sex','no_accounts','years_in_bank','kngr','kg_kd','kfrn',
'credit_rating','pjkd','dbcrkd','rk_nr','pdnr','acc_connectivity','acc_connectivity_scope')
transaction <- c('blps','txn_type','bgdt','deb_mtts','fraud_flag','otu_text1_length','otu_text2_length','otu_ofmd',
'otu_clkl','otu_otafmk','ip_adv_mk','sd','sd_dkk','otu_netbank','otu_bank','otu_bank_location','mxbl','otu_swadkd')
historical <- c('no_oi_txn','cnt_mean_month','cnt_out','blps_mean_out','blps_sd_out','sd','blps_mean','blps_sd','cred_deb_cnt',
'cred_deb_avg','cred_deb_last_days','cred_cnt','cred_avg_blps','cred_sd_blps','cred_cnt_avg_month','cred_cnt_max_month',
'cred_deb_h_min_blps','cred_deb_h_max_blps','cred_deb_h_avg_blps','cred_deb_h_std_blps','cred_deb_h_count_txn',
'cnt_otu','blps_max_out_month','blps_max_in_month','blps_max_out_week','blps_max_in_week','cred_deb_blps_max',
'cred_deb_first_days','cred_deb_first_hours')
idx <- df$y %in% customer
idx
xtable::xtable(df[idx,2:3])
?xtable
xtable::xtable(df[idx,2:3],include.rownames = FALSE)
library(xtable)
xt<-xtable(df[idx,2:3])
print(xt,include.rownames = FALSE,only.contents = TRUE)
idx <- df$y %in% transaction
library(xtable)
xt<-xtable(df[idx,2:3])
print(xt,include.rownames = FALSE,only.contents = TRUE)
idx <- df$y %in% historical
library(xtable)
xt<-xtable(df[idx,2:3])
print(xt,include.rownames = FALSE,only.contents = TRUE)
dput(df$y)
l =c("acc_connectivity",
"acc_connectivity_scope", "account_age", "bgdt", "blps", "blps_max_in_month",
"blps_max_in_week", "blps_max_out_month", "blps_max_out_week",
"blps_mean", "blps_mean_out", "blps_sd", "blps_sd_out", "cnt",
"cnt_mean_month", "cnt_otu", "cnt_out", "cre_deb_avg", "cre_deb_blps_max",
"cre_deb_cnt", "cre_deb_first_days", "cre_deb_first_hours", "cre_deb_h_avg_blps",
"cre_deb_h_max_blps", "cre_deb_h_min_blps", "cre_deb_h_std_blps",
"cre_deb_last_days", "cred_avg_blps", "cred_blps_max_month",
"cred_blps_max_week", "cred_cnt", "cred_cnt_avg_month", "cred_deb_h_count_tx",
"cred_sd_blps", "credit_rating", "dbcrkd", "deb_idkt", "deb_knid",
"deb_mtts", "fraud_flag", "ip_adv_mk", "kcfmtp", "kfrn", "kg_kd",
"kngr", "mxbl", "no_accounts", "no_oi_txn", "opid", "otu_bank",
"otu_bank_location", "otu_clkl", "otu_netbank", "otu_ofkd", "otu_ofmd",
"otu_otafmk", "otu_swadkd", "otu_text1_length", "otu_text2_length",
"pd", "pdnr", "pjkd", "rk_nr", "sd", "sd_dkk", "sex", "total_blps_in_month",
"total_blps_in_week", "total_blps_out_month", "total_blps_out_week",
"ts_age", "txn_month", "txn_type", "txn_year", "years_in_bank"
)
historical <- c('no_oi_txn','cnt_mean_month','cnt_out','blps_mean_out','blps_sd_out','sd','blps_mean','blps_sd','cred_deb_cnt',
'cre_deb_avg','cred_deb_last_days','cred_cnt','cred_avg_blps','cred_sd_blps','cred_cnt_avg_month','cred_cnt_max_month',
'cre_deb_h_min_blps','cred_deb_h_max_blps','cre_deb_h_avg_blps','cre_deb_h_std_blps','cre_deb_h_count_txn',
'cnt_otu','blps_max_out_month','blps_max_in_month','blps_max_out_week','blps_max_in_week','cre_deb_blps_max',
'cre_deb_first_days','cre_deb_first_hours')
idx <- df$y %in% historical
library(xtable)
xt<-xtable(df[idx,2:3])
print(xt,include.rownames = FALSE,only.contents = TRUE)
idx <- df$y %in% c(historical,transaction,customer)
library(xtable)
xt<-xtable(df[idx,2:3])
print(xt,include.rownames = FALSE,only.contents = TRUE)
customer
idx <- ! df$y %in% c(historical,transaction,customer)
library(xtable)
xt<-xtable(df[idx,2:3])
print(xt,include.rownames = FALSE,only.contents = TRUE)
idx <- ! df$y %in% transaction#c(historical,transaction,customer)
library(xtable)
xt<-xtable(df[idx,2:3])
print(xt,include.rownames = FALSE,only.contents = TRUE)
idx <-df$y %in% transaction#c(historical,transaction,customer)
library(xtable)
xt<-xtable(df[idx,2:3])
print(xt,include.rownames = FALSE,only.contents = TRUE)
idx <-df$y %in% historical#c(historical,transaction,customer)
library(xtable)
xt<-xtable(df[idx,2:3])
print(xt,include.rownames = FALSE,only.contents = TRUE)
idx <-df$y %in% customer#c(historical,transaction,customer)
library(xtable)
xt<-xtable(df[idx,2:3])
print(xt,include.rownames = FALSE,only.contents = TRUE)
shiny::runApp('Documents/r_scripts/calendar')
shiny::runApp('Documents/r_scripts/calendar')
RColorBrewer::display.brewer.all()
runApp('Documents/r_scripts/calendar')
runApp('Documents/r_scripts/calendar')
runApp('Documents/r_scripts/calendar')
runApp('Documents/r_scripts/calendar')
RColorBrewer::brewer.pal(11,"RdYlGn")
runApp('Documents/r_scripts/calendar')
shiny::runApp()
install.packages("highcharter")
version
library(highcharter)
runApp()
runApp()
library(dplyr)
runApp()
lungdeaths
?dygraph
library(dygraphs)
lungDeaths <- cbind(mdeaths, fdeaths)
dygraph(lungDeaths)
lungDeaths
runApp()
runApp()
runApp()
